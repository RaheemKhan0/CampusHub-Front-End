/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_getHello"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** lists all the servers in a particular type */
        get: operations["ServerController_listServer"];
        put?: never;
        /**
         * Create a new Server
         * @description Creates a new Server and returns its public view
         */
        post: operations["ServerController_createServer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a server by id */
        get: operations["ServerController_getServer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * updating an existing Server
         * @description This updates the existing Server and return its public view
         */
        patch: operations["ServerController_update"];
        trace?: never;
    };
    "/servers/{serverId}/channels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ChannelsController_list"];
        put?: never;
        post: operations["ChannelsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}/channels/{channelId}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ChannelsController_addMembers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}/channels/{channelId}/members/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["ChannelsController_removeMember"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {string} */
        ServerType: "unimodules" | "citysocieties" | "personal";
        CreateServerDto: {
            /**
             * @description We discuss calisthenics
             * @example Calisthenics
             */
            name: string;
            /** @example personal */
            type: components["schemas"]["ServerType"];
            /**
             * Format: uri
             * @description PUBLIC HTTPS(S) URL to an icon
             * @example https://cdn.example.com/icons/cs.png
             */
            icon?: string;
        };
        ServerViewDto: {
            id: string;
            name: string;
            type: components["schemas"]["ServerType"];
            slug: string;
            /** @description BetterAuth user id when the server has an owner */
            ownerId?: string;
            icon?: string;
            createdAt: string;
            updatedAt: string;
        };
        ServerListResponseDto: {
            /** @description list of servers */
            items: components["schemas"]["ServerViewDto"][];
            /** @example 42 */
            total: number;
            /** @example 1 */
            page: number;
            /** @example 20 */
            pageSize: number;
        };
        UpdateServerDto: {
            /**
             * @description We discuss calisthenics
             * @example Calisthenics
             */
            name?: string;
            /** @example personal */
            type?: components["schemas"]["ServerType"];
            /**
             * Format: uri
             * @description PUBLIC HTTPS(S) URL to an icon
             * @example https://cdn.example.com/icons/cs.png
             */
            icon?: string;
        };
        CreateChannelDto: {
            name: string;
            /** @enum {string} */
            type: "text" | "qa";
            /** @enum {string} */
            privacy: "public" | "hidden";
            position?: number;
            /** @description Optional seed access list for *hidden* channels.
             *     BA user IDs (strings), not ObjectIds. */
            memberIds?: string[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AppController_getHello: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    ServerController_listServer: {
        parameters: {
            query?: {
                /** @description free Text search */
                q?: string;
                page?: number;
                pageSize?: number;
                /** @description Select Type  */
                type?: components["schemas"]["ServerType"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paginated list of servers */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServerListResponseDto"];
                };
            };
        };
    };
    ServerController_createServer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateServerDto"];
            };
        };
        responses: {
            /** @description The created Server */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServerViewDto"];
                };
            };
        };
    };
    ServerController_getServer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The requested Server */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServerViewDto"];
                };
            };
        };
    };
    ServerController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateServerDto"];
            };
        };
        responses: {
            /** @description The updated Server */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServerViewDto"];
                };
            };
        };
    };
    ChannelsController_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ChannelsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateChannelDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    ChannelsController_addMembers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ChannelsController_removeMember: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
