/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_getHello"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** lists all the servers in a particular type */
        get: operations["ServerController_listServer"];
        put?: never;
        /**
         * Create a new Server
         * @description Creates a new Server and returns its public view
         */
        post: operations["ServerController_createServer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a server by id */
        get: operations["ServerController_getServer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * updating an existing Server
         * @description This updates the existing Server and return its public view
         */
        patch: operations["ServerController_update"];
        trace?: never;
    };
    "/servers/{serverId}/channels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ChannelsController_list"];
        put?: never;
        post: operations["ChannelsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}/channels/{channelId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ChannelsController_find"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}/channels/{channelId}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ChannelsController_addMembers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}/channels/{channelId}/members/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["ChannelsController_removeMember"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{serverId}/channels/{channelId}/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List messages in the channel */
        get: operations["MessagesController_listMessages"];
        put?: never;
        /** Create a new message in the channel */
        post: operations["MessagesController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/degrees": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all degrees */
        get: operations["DegreeController_listDegrees"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/degrees/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve degree details by slug */
        get: operations["DegreeController_getDegree"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/degrees/{slug}/modules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List modules for a degree */
        get: operations["DegreeController_listModules"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {string} */
        ServerType: "unimodules" | "citysocieties" | "personal";
        CreateServerDto: {
            /**
             * @description We discuss calisthenics
             * @example Calisthenics
             */
            name: string;
            /** @example personal */
            type: components["schemas"]["ServerType"];
            /**
             * Format: uri
             * @description PUBLIC HTTPS(S) URL to an icon
             * @example https://cdn.example.com/icons/cs.png
             */
            icon?: string;
            /** @description Associated degree identifier */
            degreeId: string;
            /** @description Associated degree-module identifier */
            degreeModuleId: string;
        };
        ServerViewDto: {
            id: string;
            name: string;
            type: components["schemas"]["ServerType"];
            slug: string;
            degreeId: string;
            degreeModuleId: string;
            /** @description BetterAuth user id when the server has an owner */
            ownerId?: string;
            icon?: string;
            createdAt: string;
            updatedAt: string;
        };
        ServerListResponseDto: {
            /** @description list of servers */
            items: components["schemas"]["ServerViewDto"][];
            /** @example 42 */
            total: number;
            /** @example 1 */
            page: number;
            /** @example 20 */
            pageSize: number;
        };
        UpdateServerDto: {
            /**
             * @description We discuss calisthenics
             * @example Calisthenics
             */
            name?: string;
            /** @example personal */
            type?: components["schemas"]["ServerType"];
            /**
             * Format: uri
             * @description PUBLIC HTTPS(S) URL to an icon
             * @example https://cdn.example.com/icons/cs.png
             */
            icon?: string;
            /** @description Associated degree identifier */
            degreeId?: string;
            /** @description Associated degree-module identifier */
            degreeModuleId?: string;
        };
        CreateChannelDto: {
            name: string;
            /** @enum {string} */
            type: "text" | "qa";
            /** @enum {string} */
            privacy: "public" | "hidden";
            position?: number;
            /** @description Optional seed access list for *hidden* channels.
             *     BA user IDs (strings), not ObjectIds. */
            memberIds?: string[];
        };
        ChannelViewDto: {
            /**
             * @description Channel id
             * @example 6710a4f2f23a5a2c5f6f8a1b
             */
            id: string;
            /**
             * @description Server id this channel belongs to
             * @example 670ffe9bd4e2f1d3c9a4b123
             */
            serverId: string;
            /**
             * @description Channel name (unique within server, unless you allow dupes)
             * @example general
             */
            name: string;
            /**
             * @description Channel type
             * @example text
             * @enum {string}
             */
            type: "text" | "qa";
            /**
             * @description Ordering position within the server
             * @example 0
             */
            position: number;
            /**
             * @description Channel privacy
             * @example public
             * @enum {string}
             */
            privacy: "public" | "hidden";
            /**
             * Format: date-time
             * @description Creation timestamp (ISO 8601)
             * @example 2025-09-27T15:21:45.123Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Last update timestamp (ISO 8601)
             * @example 2025-10-01T10:05:12.987Z
             */
            updatedAt: string;
        };
        ChannelListResponseDto: {
            /** @description the public channels for the server */
            publicChannels: unknown[][];
            /** @description private channels the user has joined */
            privateChannels?: components["schemas"]["ChannelViewDto"][];
            /** @example 42 */
            total: number;
            /** @example 1 */
            page: number;
            /** @example 20 */
            pageSize: number;
        };
        CreateAttachmentDto: {
            /**
             * @description Public URL pointing to stored attachment
             * @example https://cdn.example.com/uploads/file.pdf
             */
            url: string;
            /**
             * @description Original filename if provided
             * @example lecture-notes.pdf
             */
            name?: string;
            /**
             * @description Mime type of the attachment
             * @example application/pdf
             */
            mime?: string;
            /**
             * @description File size in bytes
             * @example 1048576
             */
            size?: number;
        };
        CreateMentionDto: {
            /**
             * @description Identifier of the mentioned user (BetterAuth user id)
             * @example usr_01hxt8zshm8yc6a5n8s6k1qj3r
             */
            userId: string;
        };
        CreateMessageDto: {
            /**
             * @description Target channel identifier
             * @example 6710a4f2f23a5a2c5f6f8a1b
             */
            channelId: string;
            /**
             * @description Message Markdown/text content
             * @example Remember to review the lecture slides before Friday's quiz.
             */
            content: string;
            /**
             * @description Name of the author (defaults to session user name)
             * @example Aaliyah Khan
             */
            authorName?: string;
            /** @description List of attachments associated with this message */
            attachments?: components["schemas"]["CreateAttachmentDto"][];
            /** @description Users mentioned in the message content */
            mentions?: components["schemas"]["CreateMentionDto"][];
        };
        MessageViewDto: {
            /**
             * @description Message identifier
             * @example 6750a4f2f23a5a2c5f6f8a1b
             */
            id: string;
            /**
             * @description Channel identifier this message belongs to
             * @example 6710a4f2f23a5a2c5f6f8a1b
             */
            channelId: string;
            /**
             * @description Author identifier (BetterAuth user id)
             * @example usr_01hxt8zshm8yc6a5n8s6k1qj3r
             */
            authorId: string;
            /**
             * @description Name of the Author
             * @example Khan
             */
            authorName: string;
            /** @description Message Markdown/text content */
            content: string;
            /** @description Attachments included with the message */
            attachments?: unknown[][];
            /** @description User mentions referenced in the message */
            mentions?: unknown[][];
            /**
             * Format: date-time
             * @description Timestamp of last edit in ISO 8601 format
             * @example 2025-10-01T10:05:12.987Z
             */
            editedAt?: string;
            /**
             * Format: date-time
             * @description Message creation timestamp (ISO 8601)
             * @example 2025-09-27T15:21:45.123Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Last update timestamp (ISO 8601)
             * @example 2025-10-01T11:05:12.987Z
             */
            updatedAt: string;
        };
        MessageListResponseDto: {
            /** @description Messages ordered chronologically (oldest to newest unless specified) */
            items: unknown[][];
            /**
             * @description Total messages available for the current filter
             * @example 125
             */
            total: number;
            /**
             * @description Current page when using page-based pagination
             * @example 1
             */
            page: number;
            /**
             * @description Number of messages per page
             * @example 50
             */
            pageSize: number;
            /**
             * @description Whether additional pages are available
             * @example false
             */
            hasMore: boolean;
        };
        DegreeViewDto: {
            /** @description Degree identifier */
            id: string;
            /** @description URL-friendly identifier */
            slug: string;
            /** @description Degree name */
            name: string;
            /** @description duration of the years */
            durationYears: number;
            /**
             * @description type of degree
             * @enum {string}
             */
            type: "undergraduate";
        };
        DegreeModuleViewDto: {
            id: string;
            moduleId: string;
            title: string;
            /** @enum {string} */
            kind: "core" | "elective";
            /** @enum {string} */
            term?: "firstterm" | "secondterm" | "full-year";
            year: number;
            description?: string;
            credits?: number;
        };
        DegreeDetailDto: {
            /** @description Degree identifier */
            id: string;
            /** @description URL-friendly identifier */
            slug: string;
            /** @description Degree name */
            name: string;
            /** @description duration of the years */
            durationYears: number;
            /**
             * @description type of degree
             * @enum {string}
             */
            type: "undergraduate";
            modules: components["schemas"]["DegreeModuleViewDto"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AppController_getHello: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    ServerController_listServer: {
        parameters: {
            query?: {
                /** @description free Text search */
                q?: string;
                page?: number;
                pageSize?: number;
                /** @description Select Type  */
                type?: components["schemas"]["ServerType"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paginated list of servers */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServerListResponseDto"];
                };
            };
        };
    };
    ServerController_createServer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateServerDto"];
            };
        };
        responses: {
            /** @description The created Server */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServerViewDto"];
                };
            };
        };
    };
    ServerController_getServer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The requested Server */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServerViewDto"];
                };
            };
        };
    };
    ServerController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateServerDto"];
            };
        };
        responses: {
            /** @description The updated Server */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServerViewDto"];
                };
            };
        };
    };
    ChannelsController_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description returns a channel list visible to the user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChannelListResponseDto"];
                };
            };
        };
    };
    ChannelsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateChannelDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    ChannelsController_find: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description returns the desired channel */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChannelViewDto"];
                };
            };
        };
    };
    ChannelsController_addMembers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description returns when adding a member in ther channel if the channel is hidden */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ChannelsController_removeMember: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channelId: string;
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description this handler deletes a member from the channel */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MessagesController_listMessages: {
        parameters: {
            query: {
                page: string;
                pageSize: string;
            };
            header?: never;
            path: {
                serverId: string;
                channelId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageListResponseDto"];
                };
            };
        };
    };
    MessagesController_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverId: string;
                channelId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateMessageDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageViewDto"];
                };
            };
        };
    };
    DegreeController_listDegrees: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DegreeViewDto"][];
                };
            };
        };
    };
    DegreeController_getDegree: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DegreeDetailDto"];
                };
            };
        };
    };
    DegreeController_listModules: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DegreeModuleViewDto"][];
                };
            };
        };
    };
}
